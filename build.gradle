plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
}

group = 'org.playifkillers.hyperoilcustom' // Change this to your actual mod group ID
version = '1.0.0' // Set the version of your mod

base {
    archivesName = 'hyperoilmod' // Change this to your actual mod ID
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

// Define your mapping channel and version here
def mapping_channel = 'official' // or 'parchment'
def mapping_version = '1.20.4' // Ensure this matches your Minecraft version

// Define your Minecraft and Forge versions
def minecraft_version = '1.20.4' // Your Minecraft version
def forge_version = '49.1.0' // Your Forge version (check the Forge site for the latest)

// Mod properties - ensure these are defined
def mod_id = 'hyperoilmod' // Your mod ID
def mod_name = 'Hyper Oil Mod' // Your mod name
def mod_license = 'All Rights Reserved' // Your mod license
def mod_version = version // Using the defined version
def mod_authors = ['playifkillers'] // List of authors
def mod_description = 'A mod with a bunch of things mostly tech based' // Mod description

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // This is automatically added by ForgeGradle; you can add other repositories if needed
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Example of mod dependencies
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
}

tasks.named('processResources', ProcessResources).configure {
    def replaceProperties = [
            minecraft_version: minecraft_version,
            mapping_channel: mapping_channel,
            mapping_version: mapping_version,
            forge_version: forge_version,
            mod_id: mod_id,
            mod_name: mod_name,
            mod_license: mod_license,
            mod_version: mod_version,
            mod_authors: mod_authors,
            mod_description: mod_description
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors.join(', '),
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors.join(', '),
                "Implementation-Timestamp" : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

// Ensure output resources are merged correctly
sourceSets.each { sourceSet ->
    def dir = layout.buildDirectory.dir("sourceSets/${sourceSet.name}")
    sourceSet.output.resourcesDir = dir
    sourceSet.java.destinationDirectory = dir
}
